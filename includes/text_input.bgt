//This is a simple text box that uses BGT's internal features rather than a regular system box.
//This class also supports the ability to mask the characters written, copy and paste, as well as set a limit of how many characters can be typed. There are also options for adjusting the echoing of characters, and how capital characters are announced.
#include "key_hold.bgt"
class text_input{
sound capital;
string[]entry;
string title;
int cursor=0;
bool passworded=false;
int textlength=0;
int repeat=1;
int caps=1;
string mask="";
key_hold back(KEY_BACK,500,40);
key_hold back2(KEY_DELETE,500,40);
key_hold larrow(KEY_LEFT,500,40);
key_hold rarrow(KEY_RIGHT,500,40);
//Constructor.
text_input()
{
reset();
}
//Destructor.
~text_input()
{
}
void reset()
{
cursor=0;
entry.resize(0);
title="";
passworded=false;
mask="";
textlength=0;
}
//This function simply returns the appropriate word form for any symbols that may arise, in case screen readers are set to not read punctuation.
string symbol_to_word(string char)
{
char=string_replace(char,"~","tilda",true);
char=string_replace(char,"!","exclaim",true);
char=string_replace(char,",","comma",true);
char=string_replace(char,".","period",true);
char=string_replace(char,"/","slash",true);
char=string_replace(char,"@","at",true);
char=string_replace(char,"#","number",true);
char=string_replace(char,"$","dollar",true);
char=string_replace(char,"%","percent",true);
char=string_replace(char,"^","caret",true);
char=string_replace(char,"&","ampersand",true);
char=string_replace(char,"*","star",true);
char=string_replace(char,"(","left paren",true);
char=string_replace(char,"%","percent",true);
char=string_replace(char,")","right paren",true);
char=string_replace(char,"-","dash",true);
char=string_replace(char,"_","underscore",true);
char=string_replace(char,"=","equals",true);
char=string_replace(char,"+","plus",true);
char=string_replace(char,"`","grave accent",true);
char=string_replace(char,"	","tab",true);
char=string_replace(char,"[","left bracket",true);
char=string_replace(char,"]","right bracket",true);
char=string_replace(char,"{","left brace",true);
char=string_replace(char,"}","right brace",true);
char=string_replace(char,"\\","backslash",true);
char=string_replace(char,"|","bar",true);
char=string_replace(char,";","semicolon",true);
char=string_replace(char,"\"","quote",true);
char=string_replace(char,":","colon",true);
char=string_replace(char,"'","apostrophe",true);
char=string_replace(char,"<","less than",true);
char=string_replace(char,">","greater than",true);
char=string_replace(char,"?","question mark",true);
return char;
}
void speak_character_at(int position)
{
if(position>entry.length()-1 or position<0){ 
speak("Blank");
return;
}
else{
string char=entry[position];
if(passworded) speak(mask,true);
else{
if(string_is_upper_case(char))
{
if(caps==1) speak("Cap "+char,true);
else if(caps==2){
capital.stop(); capital.play();
speak(char,true);
}
else if(caps==3)
{
speak(char,true);
}
}
else if(char==" ")
{
speak("Space",true);
}
else speak(symbol_to_word(char),true);
}
}
}
void input_character(string char)
{
if(entry.length()==textlength and textlength>0)
{
cursor=entry.length()-1;
return;
}

else{
if(repeat==1){
if(passworded) speak(mask,true);
else{
if(string_is_upper_case(char))
{
if(caps==1) speak("Cap "+char,true);
else if(caps==2){
capital.stop(); capital.play();
speak(char,true);
}
else if(caps==3)
{
speak(char,true);
}
}
else if(char==" ")
{
speak("Space",true);
}
else speak(symbol_to_word(char),true);
}
}
entry.insert_at(cursor,char);
}
}
string input(string ttl,string default_text="",bool uses_password=false,string mask_char="",int txtlength=0)
{
reset();
if(!capital.active) capital.load("cap.ogg");
title=ttl;
passworded=uses_password;
mask=mask_char;
textlength=txtlength;
speak(ttl,true);
if(default_text!="")
{
for(uint i=0; i<default_text.length(); i++)
{
entry.insert_last(default_text[i]);
}
cursor=entry.length();
}
while(true)
{
wait(5);
string c=string(get_characters());
if(c!="" and c.length()==1){ 
input_character(c);
cursor++;
}
if(key_pressed(KEY_TAB))speak(title,true);
if(control_down())
{
if(key_pressed(KEY_V))
{
string pastetext=clipboard_read_text();
if(pastetext.length()==0) continue;
int space=entry.length()+pastetext.length();
if(space>textlength and textlength>0) continue;
for(uint i=0; i<pastetext.length(); i++){ 
entry.insert_at(cursor,pastetext[i]);
cursor++;
}
speak("Pasted from clipboard.");
}
if(key_pressed(KEY_C))
{
string fulltext;
for(uint i=0; i<entry.length(); i++) fulltext+=entry[i];
if(fulltext.length()==0) continue;
clipboard_copy_text(fulltext);
speak("Copied to clipboard.");
}
}
if(key_pressed(KEY_RETURN))
{
if(entry.length()==0) continue;
string fulltext;
for(uint i=0; i<entry.length(); i++) fulltext+=entry[i];
return fulltext;
}
if(key_pressed(KEY_HOME))
{
cursor=0;
speak_character_at(cursor);
}
if(key_pressed(KEY_END))
{
cursor=entry.length()-1;
speak_character_at(cursor);
}
if(key_pressed(KEY_F1))
{
if(caps==1)
{
caps=2;
speak("Beep for uppercase letters.",true);
continue;
}
if(caps==2)
{
caps=3;
speak("Ignore uppercase letters.",true);
continue;
}
if(caps==3)
{
caps=1;
speak("Speak uppercase letters.",true);
continue;
}
}
if(key_pressed(KEY_F2))
{
repeat=repeat==1?0:1;
speak("Character repeat "+(repeat==1?"enabled":"disabled"),true);
}
if(key_pressed(KEY_UP) or key_pressed(KEY_DOWN))
{
string fulltext;
for(uint i=0; i<entry.length(); i++) fulltext+=entry[i];
if(fulltext.length()==0) continue;
speak(fulltext,true);
}
if(rarrow.pressing() and cursor<entry.length())
{
if(control_down()) nextword();
else{
cursor++;
speak_character_at(cursor);
}
}

if(larrow.pressing() and cursor>0)
{
if(control_down()) prevword();
else{ 
cursor--;
speak_character_at(cursor);
}
}
if((back.pressing() or back2.pressing()) and cursor>0)
{
if(control_down() and entry.length()>0)
{
speak("Cleared text.");
entry.resize(0);
cursor=0;
}
else{
speak_character_at(cursor-1);
entry.remove_at(cursor-1);
cursor--;
}
}
if(key_pressed(KEY_ESCAPE))break;
}
return "";
}
void nextword()
{
int counter;
if(entry.length()==0)
{
return;
}
if((cursor<0)||(cursor>=entry.length()))
{
return;
}
for(counter=cursor; counter<entry.length(); counter++)
{
if((entry[counter]!=" ")&&(entry[counter]!="\r"))
{
continue;
}
if(entry[counter]==" ")
{
cursor=counter+1;
speak(speak_word(cursor),true);
break;
}
if(entry[counter]=="\r")
{
cursor=counter+2;
speak(speak_word(cursor),true);
break;
}
}
if(counter==entry.length()-1)
{
cursor=entry.length();
speak("Blank",true);
}
}
void prevword()
{
bool found_end=false;
int counter;
int start;
int end;
if(entry.length()==0)
{
return;
}
if(cursor<=0)
{
return;
}
for(counter=cursor; counter>=0; counter--)
{
if(counter==entry.length())
{
continue;
}
if(counter>entry.length())
{
break;
}
if((entry[counter]!=" ")&&(entry[counter]!="\n"))
{
continue;
}
if(entry[counter]==" ")
{
if(found_end==false)
{
end=counter-1;
found_end=true;
}
else
{
cursor=counter+1;
speak(speak_word(cursor),true);
break;
}
}
if(entry[counter]=="\n")
{
if(found_end==false)
{
end=counter-2;
found_end=true;
}
else
{
cursor=counter+2;
speak(speak_word(cursor),true);
break;
}
}
}
if((counter<=0)||(counter>entry.length()))
{
cursor=0;
speak(speak_word(cursor),true);
}
}
string speak_word(int p)
{
string word;
for(uint i=p; i<entry.length(); i++)
{
if(entry[i]!=" ") word+=entry[i];
else break;
}
return word;
}
}
bool control_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL)) return true;
return false;
}