/*
Sound Positioning Functions

This file contains a collection of functions that will make dealing with sound positioning in an environment considerably easier. The functions have support for 1 dimentional environments such as those seen in side scrolling games, as well as 2 dimentional ones where the user moves along both an x and a y axis.
*/

void position_sound_1d(sound@ handle, int listener_x, int source_x, float pan_step, float volume_step)
{
position_sound_custom_1d(handle, listener_x, source_x, pan_step, volume_step, 0.0, 0.0);
}

void position_sound_custom_1d(sound@ handle, int listener_x, int source_x, float pan_step, float volume_step, float start_pan, float start_volume)
{
int delta=0;
float final_pan=start_pan;
float final_volume=start_volume;

// First, we calculate the delta between the listener and the source.
if(source_x<listener_x)
{
delta=listener_x-source_x;
final_pan-=(delta*pan_step);
final_volume-=(delta*volume_step);
}
if(source_x>listener_x)
{
delta=source_x-listener_x;
final_pan+=(delta*pan_step);
final_volume-=(delta*volume_step);
}
// Then we check if the calculated values are out of range, and fix them if that's the case.
if(final_pan<-100)
{
final_pan=-100;
}
if(final_pan>100)
{
final_pan=100;
}
if(final_volume<-100)
{
final_volume=-100;
}

// Now we set the properties on the sound, provided that they are not already correct.
if(handle.pan!=final_pan)
handle.pan=final_pan;
if(handle.volume!=final_volume)
handle.volume=final_volume;
}

void position_sound_2d(sound@ handle, int listener_x, int listener_y, int source_x, int source_y, float pan_step, float volume_step, float behind_pitch_decrease)
{
position_sound_custom_2d(handle, listener_x, listener_y, source_x, source_y, pan_step, volume_step, behind_pitch_decrease, 0.0, 0.0, 100.0);
}

void position_sound_custom_2d(sound@ handle, int listener_x, int listener_y, int source_x, int source_y, float pan_step, float volume_step, float behind_pitch_decrease, float start_pan, float start_volume, float start_pitch)
{
int delta_x=0;
int delta_y=0;
float final_pan=start_pan;
float final_volume=start_volume;
float final_pitch=start_pitch;

// First, we calculate the delta between the listener and the source.
if(source_x<listener_x)
{
delta_x=listener_x-source_x;
final_pan-=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_x>listener_x)
{
delta_x=source_x-listener_x;
final_pan+=(delta_x*pan_step);
final_volume-=(delta_x*volume_step);
}
if(source_y<listener_y)
{
final_pitch-=absolute(behind_pitch_decrease);
delta_y=listener_y-source_y;
final_volume-=(delta_y*volume_step);
}
if(source_y>listener_y)
{
delta_y=source_y-listener_y;
final_volume-=(delta_y*volume_step);
}

// Then we check if the calculated values are out of range, and fix them if that's the case.
if(final_pan<-100)
{
final_pan=-100;
}
if(final_pan>100)
{
final_pan=100;
}
if(final_volume<-100)
{
final_volume=-100;
}
if(final_pitch<handle.pitch_lower_limit)
{
final_pitch=handle.pitch_lower_limit;
}
// We don't check for the highest possible pitch as it is hard to determine.

// Now we set the properties on the sound, provided that they are not already correct.
if(handle.pan!=final_pan)
handle.pan=final_pan;
if(handle.volume!=final_volume)
handle.volume=final_volume;
if(handle.pitch!=final_pitch)
handle.pitch=final_pitch;
}
